openapi: 3.0.1
info:
  version: 1.0.0
  title: PokerAI Web Server
  description: API for PokerAI Web Server.
servers:
  - url: "{baseURL}" # for local testing
    variables:
      baseURL:
        default: "http://localhost:8080"
        description: Base URL of the server
    description: Local server
tags:
  - name: default
    description: some testing stuff
  - name: user
    description: all user related operations
  - name: team
    description: all team related operations
  - name: match
    description: all match related operations
paths:
  /:
    get:
      tags:
        - default
      summary: Get Hello World!
      description: Get Hello World!
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/HelloWorldResponseDto"
  
  /user/me:
    get:
      tags:
        - user
      summary: Get the current user
      description: Get the current user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "401":
          description: Unauthorized
        "404":
          description: Not Found

  /user/team/leave:
    post:
      tags:
        - user
      summary: Leave the current team
      description: Leave the current team
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "422":
          description: Not in a team
  /user/team/invite:
    get:
      tags:
        - user
      summary: Get all team invites
      description: Get all team invites for a user
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamInviteDto"
        "401":
          description: Unauthorized
  /user/team/invite/{teamInviteId}/accept:
    put:
      tags:
        - user
      summary: Accept a team invite
      description: Accept a team invite
      parameters:
        - in: path
          name: teamInviteId
          required: true
          schema:
            type: number
          description: The team invite id
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Team invite already accepted
  /user/team/invite/{teamInviteId}/reject:
    put:
      tags:
        - user
      summary: Reject a team invite
      description: Reject a team invite
      parameters:
        - in: path
          name: teamInviteId
          required: true
          schema:
            type: number
          description: The team invite id
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "404":
          description: Not Found
        "422":
          description: Team invite already rejected

  /user:
    get:
      tags:
        - user
      summary: Get all users
      description: Get all users
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/UserDto"
  /user/{userId}:
    get:
      tags:
        - user
      summary: Get a user by user id
      description: Get a user by user id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: number
          description: The user id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "404":
          description: Not Found
    put:
      tags:
        - user
      summary: Update a user by user id
      description: Update a user by user id
      parameters:
        - in: path
          name: userId
          required: true
          schema:
            type: number
          description: The user id
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserDto"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/UserDto"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found


  /team:
    post:
      tags:
        - team
      summary: Create a new team
      description: Create a new team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamDto"
      responses:
        "201":
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "422":
          description: User already in a team, or team already exists
    get:
      tags:
        - team
      summary: Get all teams
      description: Get all teams
      operationId: getAllTeams
      parameters:
        - in: query
          name: lastGames
          required: false
          schema:
            type: number
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/TeamDto"
  
  /team/{teamId}:
    get:
      tags:
        - team
      summary: Get a team by teamId
      description: Get a team by team id
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: number
          description: The team id of the team
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "404":
          description: Not Found
    put:
      tags:
        - team
      summary: Update a team by team id
      description: Update a team by team id
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: number
          description: The team id of the team
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TeamDto"
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/TeamDto"
        "400":
          description: Bad Request
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
        "422":
          description: User already in a team, team id already taken, or team already exists
    delete:
      tags:
        - team
      summary: Delete a team by team id
      description: Delete a team by team id
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: number
          description: The team id of the team
      responses:
        "204":
          description: No Content
        "401":
          description: Unauthorized
        "403":
          description: Forbidden

  /match/team/{teamId}:
    get:
      tags:
        - match
      summary: Get all matches
      description: Get all matches of my team
      parameters:
        - in: path
          name: teamId
          required: true
          schema:
            type: number
          description: The team id of the team
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/MatchDto"
  /match/{matchId}/logs/engine/csv:
    get:
      tags:
        - match
      summary: Get the engine logs of a match by match id
      description: Get the engine logs of a match by match id
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: number
          description: The match id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadLinkDto"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  /match/{matchId}/logs/engine/txt:
    get:
      tags:
        - match
      summary: Get the engine logs of a match by match id
      description: Get the engine logs of a match by match id
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: number
          description: The match id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadLinkDto"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  /match/{matchId}/logs/bot:
    get:
      tags:
        - match
      summary: Get the bot logs of a match by match id
      description: Get the bot logs of a match by match id
      parameters:
        - in: path
          name: matchId
          required: true
          schema:
            type: number
          description: The match id
      responses:
        "200":
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/DownloadLinkDto"
        "401":
          description: Unauthorized
        "403":
          description: Forbidden
        "404":
          description: Not Found
  
components:
  schemas:
    HelloWorldResponseDto:
      type: object
      properties:
        msg:
          type: string
          example: Hello World!
      required:
        - msg
    UserDto:
      type: object
      properties:
        userId:
          type: number
          example: 0
        email:
          type: string
          example: "acarnegie"
        permissionLevel:
          type: string
          enum: ["ADMIN", "USER"]
        teamId:
          type: number
          example: 0
        teamName:
          type: string
          example: "andrewc"
      required:
        - userId
        - email
        - permissionLevel
    TeamInviteDto:
      type: object
      properties:
        teamInviteId:
          type: number
          example: 0
        teamId:
          type: number
          example: 0
        teamName:
          type: string
          example: "andrewc"
        inviteeId:
          type: number
          example: 0
        inviteeEmail:
          type: string
          example: "acarnegie@cmu.edu"
        sendAt:
          type: string
          format: date-time
          example: "2021-04-01T12:00:00Z"
      required:
        - teamInviteId
        - teamId
        - inviteeId
    TeamDto:
      type: object
      properties:
        teamId:
          type: number
          example: 0
        teamName:
          type: string
          example: "andrewc"
        activeBot:
          type: object
          $ref: "#/components/schemas/BotDto"
        members:
          type: array
          items:
            type: number
            example: 1
        wins:
          type: number
          example: 10
        losses:
          type: number
          example: 2
        elo:
          type: number
          example: 1000
        isDeleted:
          type: boolean
          example: false
      required:
        - teamName
        - teamId
        - members
    BotDto:
      type: object
      properties:
        botId:
          type: number
          example: 0
        botVersion:
          type: number
          example: 10
        createdAt:
          type: string
          format: date-time
          example: "2021-04-01T12:00:00Z"
      required:
        - botId
        - botVersion
        - createdAt
    MatchDto:
      type: object
      properties:
        matchId:
          type: number
          example: 0
        timestamp:
          type: string
          format: date-time
          example: "2021-04-01T12:00:00Z"
        isRequestedMatch:
          type: boolean
          example: true
        teamMatches:
          type: array
          items:
            $ref: "#/components/schemas/TeamMatchDto"
        isCompleted:
          type: boolean
          example: true
      required:
        - matchId
        - isRequestedMatchjust 
        - timestamp
        - teamMatches
        - isCompleted
    TeamMatchDto:
      type: object
      properties:
        teamId:
          type: number
          example: 0
        teamName:
          type: string
          example: "andrewc"
        botVersion:
          type: number
          example: 10
        bankroll:
          type: number
          example: 2000
      required:
        - teamId
        - teamName
        - botVersion
        - bankroll
    MatchRequestDto:
      type: object
      properties:
        matchRequestId:
          type: number
          example: 0
        requestingTeamId:
          type: number
          example: 0
        requestedTeamId:
          type: number
          example: 0
        requestedAt:
          type: string
          format: date-time
          example: "2021-04-01T12:00:00Z"
        accepted:
          type: boolean
          example: true
      required:
        - matchRequestId
        - requestingTeamId
        - requestedTeamId
        - requestedAt
    DownloadLinkDto:
      type: object
      properties:
        downloadUrl:
          type: string
          example: "http://localhost:8080/match/6ba7b810-9dad-11d1-80b4-00c04fd430c8/logs/engine"
        filetype:
          type: string
          enum: ["csv", "txt"]
      required:
        - downloadLink
        - filetype

  securitySchemes:
    bearerAuth:            # arbitrary name for the security scheme
      type: http
      scheme: bearer
      bearerFormat: JWT    # optional, arbitrary value for documentation purposes

security:
  - bearerAuth: []

